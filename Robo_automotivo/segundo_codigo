// Definições de funções de escrita e leitura digitais
void __ardublockDigitalWrite(int pinNumber, boolean status) {
  pinMode(pinNumber, OUTPUT);
  digitalWrite(pinNumber, status);
}

boolean __ardublockDigitalRead(int pinNumber) {
  pinMode(pinNumber, INPUT);
  return digitalRead(pinNumber);
}

// Pinos de conexão do módulo RGB
#define pinS0 12
#define pinS1 8
#define pinS2 11
#define pinS3 10
#define pinOut 9
#define pinLed 13

unsigned int valorVermelho = 0;
unsigned int valorVerde = 0;
unsigned int valorAzul = 0;
unsigned int valorBranco = 0;
unsigned int vermelho = 0;
unsigned int verde = 0;
unsigned int azul = 0;

void parado();
void frente();
void esquerda();
void direita();
void detectaCor(); //RGB

void setup() {
  pinMode(pinS0, OUTPUT);
  pinMode(pinS1, OUTPUT);
  pinMode(pinS2, OUTPUT); // Pinos RGB
  pinMode(pinS3, OUTPUT);
  pinMode(pinOut, INPUT);
  pinMode(pinLed, OUTPUT);

  Serial.begin(9600);
  digitalWrite(pinS0, HIGH);
  digitalWrite(pinS1, LOW);
}

void loop() {
  // Detecta a cor
  detectaCor();

  // Mostra valores no serial monitor
  Serial.print("Vermelho: ");
  Serial.print(valorVermelho);
  Serial.print(" Verde: ");
  Serial.print(valorVerde);
  Serial.print(" Azul: ");
  Serial.print(valorAzul);
  Serial.print(" Branco: ");
  Serial.print(valorBranco);
  Serial.println();

  // Verifica cor
  if ((valorVermelho < valorAzul) &&
      (valorVermelho < valorVerde) &&
      (valorBranco < 100)) {
    Serial.println("Vermelho");
    vermelho = 1;
    verde = 0;
    azul = 0;
  } else if ((valorAzul < valorVermelho) &&
             (valorAzul < valorVerde) &&
             (valorBranco < 100)) {
    Serial.println("Azul");
    azul = 1;
  } else if ((valorVerde < valorVermelho) &&
             (valorVerde < valorAzul) &&
             (valorBranco < 100)) {
    Serial.println("Verde");
    vermelho = 0;
    verde = 1;
    azul = 0;
  }

  // Controles
  if (verde == 1) {
    if ((__ardublockDigitalRead(8) == HIGH) &&
        (__ardublockDigitalRead(12) == HIGH)) {
      parado();
    }
    if ((__ardublockDigitalRead(8) == LOW) &&
        (__ardublockDigitalRead(12) == LOW)) {
      frente();
    }
    if ((__ardublockDigitalRead(8) == LOW) &&
        (__ardublockDigitalRead(12) == HIGH)) {
      direita();
    }
    if ((__ardublockDigitalRead(8) == HIGH) &&
        (__ardublockDigitalRead(12) == LOW)) {
      esquerda();
    }
  } else if (vermelho == 1) {
    parado();
  } else if (azul == 1) {
    // Piscar LED
    digitalWrite(pinLed, HIGH);
    delay(1000);
    digitalWrite(pinLed, LOW);
    delay(1000);
    digitalWrite(pinLed, HIGH);
    delay(1000);
    digitalWrite(pinLed, LOW);
    azul = 0;
  }
}

void direita() {
  __ardublockDigitalWrite(2, LOW);
  __ardublockDigitalWrite(4, LOW);
  analogWrite(3, 150);
  __ardublockDigitalWrite(5, HIGH);
  __ardublockDigitalWrite(7, LOW);
  analogWrite(6, 150);
}

void frente() {
  __ardublockDigitalWrite(2, HIGH);
  __ardublockDigitalWrite(4, LOW);
  analogWrite(3, 150);
  __ardublockDigitalWrite(5, HIGH);
  __ardublockDigitalWrite(7, LOW);
  analogWrite(6, 150);
}

void parado() {
  __ardublockDigitalWrite(2, LOW);
  __ardublockDigitalWrite(4, LOW);
  analogWrite(3, 0);
  __ardublockDigitalWrite(5, LOW);
  __ardublockDigitalWrite(7, LOW);
  analogWrite(6, 0);
}

void esquerda() {
  __ardublockDigitalWrite(2, HIGH);
  __ardublockDigitalWrite(4, LOW);
  analogWrite(3, 150);
  __ardublockDigitalWrite(5, LOW);
  __ardublockDigitalWrite(7, LOW);
  analogWrite(6, 150);
}

// Função de leitura do sensor de cor
void detectaCor() {
  // Vermelho
  digitalWrite(pinS2, LOW);
  digitalWrite(pinS3, LOW);
  valorVermelho = pulseIn(pinOut, digitalRead(pinOut) == HIGH ? LOW : HIGH);

  // Sem filtro
  digitalWrite(pinS2, HIGH);
  valorBranco = pulseIn(pinOut, digitalRead(pinOut) == HIGH ? LOW : HIGH);

  // Azul
  digitalWrite(pinS2, LOW);
  digitalWrite(pinS3, HIGH);
  valorAzul = pulseIn(pinOut, digitalRead(pinOut) == HIGH ? LOW : HIGH);

  // Verde
  digitalWrite(pinS2, HIGH);
  valorVerde = pulseIn(pinOut, digitalRead(pinOut) == HIGH ? LOW : HIGH);
}
